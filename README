type-level: Type-level programming library

DESCRIPTION


 This library permits performing computations on the type-level. Type-level 
 functions are implemented using functional dependencies of multi
 parameter type classes. 

 To date, Booleans and Numerals (Naturals and Positives) are
 supported. With regard to Numerals, there is support for common
 arithmetic operations (addition, subtraction, multiplication,
 division, exponientation, logarithm, maximum, comparison, GCD) 
 over natural numbers (using a decimal representation to make 
 compile-time errors friendlier).

 Although making use of type-level computations might seem devious and
 obfuscated at first sight, it is indeed useful in practice to implement 
 lightweight dependent types such us number-parameterized types (e.g. an array 
 type parameterized by the array's size or a modular group type Zn 
 parameterized by the modulus).

 Here is a tutorial on type-level numerals and how to use them to
implement numerically-parameterized vectors: https://forsyde.ict.kth.se/trac/wiki/ForSyDe/Haskell/ForSyDeTutorial#FSVec

DEPENDENCIES
 
 type-level depends on GHC (due to the use of Multiparameter Type Classes and 
 infix type constructors) and Template Haskell

INSTALLATION

to install globally, for the whole system (requires admin permissions):

$ ./Setup.hs configure
$ ./Setup.hs build
$ ./Setup.hs haddock # generate documentation, optional, 
                     # requires Haddock > 2.0 due to the use of TH
$ ./Setup.hs install

to install locally and just for your own user:

$ ./Setup.hs configure --prefix=The/selected/local/directory
$ ./Setup.hs build
$ ./Setup.hs haddock  # generate documentation, optional, 
                      # requires Haddock > 2.0 due to the use of TH

$ ./Setup.hs install --user
